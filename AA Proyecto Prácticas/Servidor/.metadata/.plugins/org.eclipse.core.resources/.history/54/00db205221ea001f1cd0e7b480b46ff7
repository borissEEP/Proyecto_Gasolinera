package com.gasolinera.controllers;

import java.util.List;
import java.util.Optional;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.gasolinera.clases.Combustible;
import com.gasolinera.clases.Surtidor;
import com.gasolinera.repository.CombustibleRepository;
import com.gasolinera.repository.SurtidorRepository;

@CrossOrigin(origins = "*")
@RestController
@RequestMapping("/surtidores")
public class SurtidorController {

	private final SurtidorRepository surtidorRepository;

	private final CombustibleRepository combustibleRepository;

	public SurtidorController(SurtidorRepository surtidorRepository, CombustibleRepository combustibleRepository) {
		this.surtidorRepository = surtidorRepository;
		this.combustibleRepository = combustibleRepository;
	}

	// Obtener todos los surtidores
	@GetMapping
	public List<Surtidor> obtenerSurtidores() {
		return surtidorRepository.findAll();
	}

	// Obtener datos de un surtidor por su ID
	@GetMapping("/{requestedId}")
	private ResponseEntity<Surtidor> surtidorPorId(@PathVariable Integer requestedId) {
		Optional<Surtidor> surtidorOptional = surtidorRepository.findById(requestedId);
		if (surtidorOptional.isPresent()) {
			return ResponseEntity.ok(surtidorOptional.get());
		} else {
			return ResponseEntity.notFound().build();
		}
	}

	// Dar de alta un surtidor (crearlo)
	@PostMapping
	private ResponseEntity<Surtidor> createSurtidor(@RequestBody Surtidor surtidor) {
		if (surtidor.getNombre() == null || surtidor.getNombre().isEmpty()) {
			return ResponseEntity.badRequest().body(null);
		}

		if (surtidor.getCombustible() == null || surtidor.getCombustible().getId() == null) {
			return ResponseEntity.badRequest().body(null);
		}

		// Buscar el combustible en la base de datos antes de asociarlo
		Combustible combustible = combustibleRepository.findById(surtidor.getCombustible().getId()).orElseThrow(
				() -> new IllegalArgumentException("‚ùå No existe un combustible con ese ID en la base de datos."));

		// Asociar el combustible existente al surtidor
		surtidor.setCombustible(combustible);

		// Guardar el surtidor correctamente
		Surtidor savedSurtidor = surtidorRepository.save(surtidor);

		return ResponseEntity.ok(savedSurtidor);
	}

	// Modificar datos del surtidor (combustible por id y nombre del surtidor)
	@PutMapping("/{requestedId}")
	private ResponseEntity<Surtidor> updateSurtidor(@PathVariable Integer requestedId,
			@RequestBody Surtidor surtidorUpdate) {
		Optional<Surtidor> surtidorOptional = surtidorRepository.findById(requestedId);

		if (surtidorOptional.isPresent()) {
			Surtidor existingSurtidor = surtidorOptional.get();

			if (surtidorUpdate.getNombre() != null) {
				existingSurtidor.setNombre(surtidorUpdate.getNombre());
			}

			if (surtidorUpdate.getCombustible() != null && surtidorUpdate.getCombustible().getId() != null) {
				Optional<Combustible> combustibleOptional = combustibleRepository
						.findById(surtidorUpdate.getCombustible().getId());

				if (combustibleOptional.isPresent()) {
					existingSurtidor.setCombustible(combustibleOptional.get());
				} else {
					return ResponseEntity.badRequest().body(null);
				}
			}

			Surtidor updateSurtidor = surtidorRepository.save(existingSurtidor);
			return ResponseEntity.ok(updateSurtidor);

		} else {
			return ResponseEntity.notFound().build();
		}
	}

	// Baja a un surtidor por su id (borrarlo)
	@DeleteMapping("/{id}")
	private ResponseEntity<Void> bajaSurtidor(@PathVariable Integer id) {
		if (!surtidorRepository.existsById(id)) {
			return ResponseEntity.notFound().build();
		}
		surtidorRepository.deleteById(id);
		return ResponseEntity.noContent().build();
	}
}
