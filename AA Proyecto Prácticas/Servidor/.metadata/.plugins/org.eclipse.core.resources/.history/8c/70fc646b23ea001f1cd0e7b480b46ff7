package com.gasolinera.controllers;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.gasolinera.clases.Combustible;
import com.gasolinera.clases.Surtidor;
import com.gasolinera.repository.CombustibleRepository;
import com.gasolinera.repository.SurtidorRepository;

@CrossOrigin(origins = "*")
@RestController
@RequestMapping("/surtidores")
public class SurtidorController {

	private final SurtidorRepository surtidorRepository;

	private final CombustibleRepository combustibleRepository;

	public SurtidorController(SurtidorRepository surtidorRepository, CombustibleRepository combustibleRepository) {
		this.surtidorRepository = surtidorRepository;
		this.combustibleRepository = combustibleRepository;
	}

	// Obtener todos los surtidores
	@GetMapping
	public List<Surtidor> obtenerSurtidores() {
		return surtidorRepository.findAll();
	}

	// Obtener datos de un surtidor por su ID
	@GetMapping("/{requestedId}")
	private ResponseEntity<Surtidor> surtidorPorId(@PathVariable Integer requestedId) {
		Optional<Surtidor> surtidorOptional = surtidorRepository.findById(requestedId);
		if (surtidorOptional.isPresent()) {
			return ResponseEntity.ok(surtidorOptional.get());
		} else {
			return ResponseEntity.notFound().build();
		}
	}

	// Dar de alta un surtidor (crearlo)
	@PostMapping
	private ResponseEntity<Surtidor> createSurtidor(@RequestBody Surtidor surtidor) {
	    if (surtidor.getNombre() == null || surtidor.getNombre().isEmpty()) {
	        return ResponseEntity.badRequest().body(null);
	    }

	    if (surtidor.getCombustibles() == null || surtidor.getCombustibles().isEmpty()) {
	        return ResponseEntity.badRequest().body(null);
	    }

	    // Crear una nueva lista para almacenar los combustibles validados
	    List<Combustible> combustiblesValidados = new ArrayList<>();

	    // Verificar que cada combustible existe en la base de datos
	    for (Combustible c : surtidor.getCombustibles()) {
	        Combustible combustible = combustibleRepository.findById(c.getId())
	                .orElseThrow(() -> new IllegalArgumentException("‚ùå El combustible con ID " + c.getId() + " no existe."));
	        combustiblesValidados.add(combustible);
	    }

	    // Asociar la lista validada de combustibles al surtidor
	    surtidor.setCombustibles(combustiblesValidados);

	    // Guardar el surtidor con sus combustibles correctamente
	    Surtidor savedSurtidor = surtidorRepository.save(surtidor);

	    return ResponseEntity.ok(savedSurtidor);
	}

	// Baja a un surtidor por su id (borrarlo)
	@DeleteMapping("/{id}")
	private ResponseEntity<Void> bajaSurtidor(@PathVariable Integer id) {
		if (!surtidorRepository.existsById(id)) {
			return ResponseEntity.notFound().build();
		}
		surtidorRepository.deleteById(id);
		return ResponseEntity.noContent().build();
	}
}
